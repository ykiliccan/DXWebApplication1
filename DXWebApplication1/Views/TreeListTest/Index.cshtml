
@{
    ViewBag.Title = "Index";
}

<style type="text/css">
    .highlight {
        background-color: #99FF66;
    }
</style>



<script type="text/javascript">
function OnBeginCallback(s, e) {
        console.log('Tree Begin callback : ' + e.command);

        e.customArgs["search"] = TextBox.GetText();
        e.customArgs["filter"] = TextBoxFilter.GetText();
        e.customArgs["columnList"] = tokenBoxFilter.GetText();

        //var container = $("body");
        //var token = $('input[name="__RequestVerificationToken"]', container).val();
        //e.customArgs["__RequestVerificationToken"] = token;

        //if (e.command === "StartEditNewNode") {
        //   // console.log('GrupId: ' + gvStokParametreListe.cpAnaGrupId);
        //    e.customArgs["_grupId"] = 989999;
        //}
        //else if (e.command === "UpdateEdit") {
        //    console.log('TreeList: ' + gvStokParametreListe.cpParametreDegerListesi);
        //    e.customArgs["ParametreDegerListesi"] = gvStokParametreListe.cpParametreDegerListesi;
        //    e.customArgs["_grupId"] = 989988;
        //}
    }
function OnTreeNodeFocusing(s, e) {

    //    sonBakilanStokNodKeyi = e.nodeKey;

}

function OnEndCallback(s, e) {

    console.log("end callback");
}
function OnTextChanged(s, e) {
    treeList1.PerformCallback({ search: TextBox.GetText() });
}

function OnFilterButtonClick(s, e) {
    ApplyTreeListFilter(true);
}
function OnFilterTextChanged(s, e) {
    
    
    //treeList1.PerformCallback({ ozFilter: TextBoxFilter.GetText() });

}
function OnFilterValueChanged(s, e) {
    ApplyTreeListFilter();
}
function ApplyTreeListFilter(checkEmptyFilter){

    filterText = TextBoxFilter.GetText();
    if (!checkEmptyFilter || (checkEmptyFilter && filterText)) {
        treeList1.PerformCallback({ filter: filterText, columnList: tokenBoxFilter.GetText(), filterMode: rbListTreeFilter.GetValue() });
    }
    console.log(TextBoxFilter.GetText());
}
function OnTokensChanged(s, e) {
    ApplyTreeListFilter(true);
}

function OnFilterRadioListSelectedIndexChanged(s, e) {

    ApplyTreeListFilter(true);
}

function OnContextMenu (s,e){
    if (e.objectType != 'Node') return;
    s.SetFocusedNodeKey(e.objectKey);
    var mouseX = ASPxClientUtils.GetEventX(e.htmlEvent);
    var mouseY = ASPxClientUtils.GetEventY(e.htmlEvent);
    ShowMenu(e.objectKey, mouseX, mouseY);
}

function ShowMenu(nodeKey, x, y) {
    clientPopupMenu.ShowAtPos(x, y);
    var menu = ASPxClientPopupMenu.Cast(clientPopupMenu);
   // menu.GetItemByName("paste").SetEnabled(copyNodeKey != null);

}

function OnMenuClick(s, e) {

    switch (e.item.name) {
        case "mItemExpandAll":
            {
                treeList1.ExpandAll();
                break;
            }
        case "mItemCollapseAll":
            {
                treeList1.CollapseAll();

                break;
            }
    }

}

</script>

@Html.DevExpress().PopupMenu(settings =>
{
    settings.Name = "clientPopupMenu";
    settings.AllowSelectItem = false;


    settings.Items.Add(item =>
    {
        item.Text = "Tümünü Aç";
        item.Name = "mItemExpandAll";
        item.Image.Url = "/Content/images/tumunuAc.png";

    });


    settings.Items.Add(item =>
    {
        item.Text = "Tümünü Aç";
        item.Name = "mItemExpandAll";
        item.Image.Url = "/Content/images/tumunuAc.png";

    });

    settings.Items.Add(item =>
    {
        item.Text = "Tümünü Kapat";
        item.Name = "mItemCollapseAll";
        item.Image.Url = "/Content/images/tumunuKapa.png";

    });


    settings.ClientSideEvents.ItemClick = "OnMenuClick";

}).GetHtml()


@Html.DevExpress().TextBox(settings =>
{
    settings.Name = "TextBox";
    settings.Properties.Caption = "Search";
    settings.Properties.ClientSideEvents.TextChanged = "OnTextChanged";
}).GetHtml()

@Html.DevExpress().RoundPanel(pnl =>
{
    pnl.Name = "searchFrmRoundPanel";
    pnl.AllowCollapsingByHeaderClick = true;
    pnl.ShowCollapseButton = true;
    pnl.View = DevExpress.Web.View.GroupBox;
    pnl.ShowHeader = false;
    pnl.SetContent(() =>
    {
        @Html.DevExpress().FormLayout(settings =>
        {
            settings.Name = "frmSearchPanel";
            settings.ColCount = 5;
            settings.SettingsItemCaptions.Location = LayoutItemCaptionLocation.Top;
            

            settings.Items.Add(item =>
            {
                item.Name = "TextBoxFilter";
                item.ShowCaption = DefaultBoolean.False;
                item.HelpText = "Aranacak kelime";
                item.HelpTextSettings.Position = HelpTextPosition.Top;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.ButtonEdit;
                ButtonEditSettings ts = (ButtonEditSettings)item.NestedExtensionSettings;
                ts.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.Always;

                ts.Properties.ClientSideEvents.ValueChanged = "OnFilterValueChanged";
            });

            settings.Items.Add(item =>
            {
                item.Name = "rbListTreeFilter";
                item.ShowCaption = DefaultBoolean.False;
                item.NestedControlCellStyle.Paddings.PaddingBottom = 0;
                //item.HorizontalAlign = FormLayoutHorizontalAlign.Right;
                item.VerticalAlign = FormLayoutVerticalAlign.Bottom;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.RadioButtonList;
                RadioButtonListSettings rbs = (RadioButtonListSettings)item.NestedExtensionSettings;
                rbs.Properties.RepeatDirection = RepeatDirection.Horizontal;
                rbs.Properties.Items.Add("İçerir", 1).Selected = true;
                rbs.Properties.Items.Add("İle Başlar", 2);

                rbs.ControlStyle.Border.BorderStyle = BorderStyle.None;
                rbs.ControlStyle.VerticalAlign = VerticalAlign.Bottom;
                rbs.Properties.RootStyle.Paddings.PaddingBottom = 0;
                rbs.Properties.ClientSideEvents.SelectedIndexChanged = "OnFilterRadioListSelectedIndexChanged";

            });


            settings.Items.Add(item =>
            {
                item.Name = "tokenBoxFilter";
                item.ShowCaption = DefaultBoolean.False;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.TokenBox;
                //item.Caption = "Arama Yapılacak Kolonlar";
                item.HelpText = "Arama Yapılacak Kolonlar";
                item.HelpTextSettings.Position = HelpTextPosition.Top;
                TokenBoxSettings tbs = (TokenBoxSettings)item.NestedExtensionSettings;
                tbs.Name = "tokenBoxFilter";
                tbs.Properties.Items.Add("Name");
                tbs.Properties.Items.Add("Data");
                tbs.Properties.Tokens.Add("Name");

                tbs.Properties.ClientSideEvents.TokensChanged = "OnTokensChanged";

            });

            settings.Items.Add(item =>
            {
                item.Name = "btnFilter";
                //item.Caption = "";
                item.ShowCaption = DefaultBoolean.False;
                item.VerticalAlign = FormLayoutVerticalAlign.Bottom;
                item.NestedExtensionType = FormLayoutNestedExtensionItemType.Button;
                ButtonSettings ts = (ButtonSettings)item.NestedExtensionSettings;
                ts.ClientSideEvents.Click = "OnFilterButtonClick";
                ts.Text = "Süz";
                ts.Images.Image.IconID = IconID.ActionsFilter16x16devav;
            });

        }).GetHtml();
    });

}).GetHtml()


    @using (Html.BeginForm())
    {
    Html.RenderAction("TreeListControl", "TreeListTest");
}
